using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using System.Security.Cryptography.Xml;
using NotificationsService.Services;
using NotificationsService.Models;
using Amazon.DynamoDBv2.Model;

namespace NotificationsService.Services
{
    [ApiController]
    [Route("api/[controller]")]
    public class PrController : ControllerBase
    {
        private readonly PrService _prService;
        private readonly ILogger<PrController> _logger;

        public PrController(PrService prService, ILogger<PrController> logger)
        {
            _prService = prService;
            _logger = logger;
        }

        [HttpGet("health")]
        public IActionResult GetHealth()
        {
            return Ok("Healthy");
        }

        [HttpGet("routes")]
        public IActionResult ListRoutes()
        {
            return Ok(new[] {
                "GET /api/pr/openprs",
                "GET /api/pr/health",
                "GET /api/pr/details?id=&repo=",
                "GET /api/pr/review?prNumber=",
                "POST /api/pr/feedback",
                "POST /api/pr/decision"
            });
        }

        [HttpGet("openprs")]
        public async Task<IActionResult> GetOpenPrs()
        {
            _logger.LogDebug("Received request to get all open PRs.");
            try
            {
                var dynamoService = new DynamoService(_logger);
                _logger.LogDebug("Received request to get PR Details.");
                var allReviews = await dynamoService.GetAllReviewsAsync();
                // Create a list to hold the processed reviews
                var processedReviews = new List<object>();
                // Process each review item using the shared parsing method
                foreach (var prItem in allReviews)
                {
                    try
                    {
                        var reviewDetails = GetPrItemDetails(prItem);
                        if (reviewDetails != null)
                        {
                            processedReviews.Add(reviewDetails);
                            _logger.LogDebug($"Processed review with ID: {((dynamic)reviewDetails).id}");
                        }
                        else
                        {
                            _logger.LogWarning("Skipping review item with missing required fields");
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "Error processing individual review item");
                        // Continue with next item rather than failing the entire request
                    }
                }

                _logger.LogDebug($"Successfully processed {processedReviews.Count} reviews");
                return Ok(processedReviews);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Caught exception in GetDetails().");
            }
            return NotFound();

        }

        // 1. Get PR Details (already assumed)
        [HttpGet("details")]
        public async Task<IActionResult> GetDetails([FromQuery] int id, string repo)
        {
            try
            {
                var dynamoService = new DynamoService(_logger);
                _logger.LogDebug("Received request to get PR Details.");
                var prItem = await dynamoService.GetReviewByIdAsync(id, repo);
                _logger.LogDebug($"prItem from DDB: {prItem}");
                if (prItem != null)
                {
                    var metadataMap = prItem["metadata"].M; // Step 1: get the map
                    return Ok(new
                    {
                        id = metadataMap["pr_number"].S, // Step 2: get value from map (number as string)
                        title = prItem["reviewTitle"].S,
                        author = metadataMap["user_login"].S,
                        date = metadataMap["created_at"].S,
                        status = metadataMap["pr_state"].S,
                        prurl = metadataMap["html_url"].S,
                        repo = metadataMap["repo"].S,
                        review = prItem["review"].S
                    });
                }
                else
                {
                    return NotFound();
                }
            }
            catch(Exception ex)
            {
                _logger.LogError(ex, $"Caught exception in GetDetails().");
            }
            return NotFound();
        }

        // 2. Get PR Review text
        [HttpGet("review")]
        public IActionResult GetReview([FromQuery] int prNumber)
        {
            _logger.LogDebug("Received request to get Review.");
            // TODO: Replace with real PR review generation
            string mockReview = $"This is an autogenerated review for PR #{prNumber}. It looks good overall but could use minor improvements.";

            return Ok(mockReview);
        }

        // 3. POST feedback for thumbs up/down
        [HttpPost("feedback")]
        public IActionResult PostFeedback([FromBody] FeedbackRequest request)
        {
            _logger.LogDebug($"Received feedback: PR#{request.prNumber}, Vote: {request.vote}");
            //Console.WriteLine($"Received feedback: PR#{request.PrNumber}, Vote: {request.Vote}");

            return Ok(new { message = "Feedback received by the Notifications Service" });
        }

        // 4. POST action decision (Approve or Request Changes)
        [HttpPost("decision")]
        public IActionResult PostReview([FromBody] DecisionRequest request)
        {
            _logger.LogDebug($"Received decision: PR#{request.prNumber}, Decision: {request.decision}");
            // call the git service to submit the decision to Git
            return Ok(new { message = "Decision received by the Notifications Service" });
        }
        public object GetPrItemDetails(Dictionary<string, AttributeValue> prItem)
        {
            if (prItem == null || !prItem.ContainsKey("metadata") || !prItem.ContainsKey("reviewTitle") || !prItem.ContainsKey("review"))
            {
                return null;
            }

            var metadataMap = prItem["metadata"].M;

            return new
            {
                id = metadataMap.ContainsKey("pr_number") ? metadataMap["pr_number"].S : "Unknown",
                title = prItem["reviewTitle"].S,
                author = metadataMap.ContainsKey("user_login") ? metadataMap["user_login"].S : "Unknown",
                date = metadataMap.ContainsKey("created_at") ? metadataMap["created_at"].S : "Unknown",
                status = metadataMap.ContainsKey("pr_state") ? metadataMap["pr_state"].S : "Unknown",
                prurl = metadataMap.ContainsKey("html_url") ? metadataMap["html_url"].S : "Unknown",
                repo = metadataMap.ContainsKey("repo") ? metadataMap["repo"].S : "Unknown",
                review = prItem["review"].S
            };
        }

    }

    // Request DTOs
    public class FeedbackRequest
    {
        public int prNumber { get; set; }
        public string vote { get; set; } // \"up\" or \"down\"
    }

    public class DecisionRequest
    {
        public int prNumber { get; set; }
        public string decision { get; set; } // \"Approve\" or \"Request Changes\"
        public string review { get; set; }
    }
}



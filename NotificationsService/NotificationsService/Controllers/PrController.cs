using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using System.Security.Cryptography.Xml;
using NotificationsService.Services;

namespace NotificationsService.Services
{
    [ApiController]
    [Route("api/[controller]")]
    public class PrController : ControllerBase
    {
        private readonly PrService _prService;
        private readonly ILogger<PrController> _logger;

        public PrController(PrService prService, ILogger<PrController> logger)
        {
            _prService = prService;
            _logger = logger;
        }

        [HttpGet("health")]
        public IActionResult GetHealth()
        {
            return Ok("Healthy");
        }

        [HttpGet("routes")]
        public IActionResult ListRoutes()
        {
            return Ok(new[] {
                "GET /api/pr",
                "GET /api/pr/health",
                "GET /api/pr/details?id=&repo=",
                "GET /api/pr/review?prNumber=",
                "POST /api/pr/feedback",
                "POST /api/pr/decision"
            });
        }

        [HttpGet]
        public IActionResult GetOpenPrs()
        {
            _logger.LogInformation("Received request to get open PRs.");
            var prs = _prService.GetAllPrs();
            return Ok(prs);
        }

        // 1. Get PR Details (already assumed)
        [HttpGet("details")]
        public async Task<IActionResult> GetDetails([FromQuery] int id, string repo)
        {
            try
            {
                var dynamoService = new DynamoService(_logger);
                _logger.LogInformation("Received request to get PR Details.");
                var prItem = await dynamoService.GetReviewByIdAsync(id, repo);
                _logger.LogInformation($"prItem from DDB: {prItem}");
                if (prItem != null)
                {
                    var metadataMap = prItem["metadata"].M; // Step 1: get the map
                    return Ok(new
                    {
                        id = metadataMap["pr_number"].S, // Step 2: get value from map (number as string)
                        title = prItem["reviewTitle"].S,
                        author = metadataMap["user_login"].S,
                        date = metadataMap["created_at"].S,
                        status = metadataMap["pr_state"].S,
                        prurl = metadataMap["html_url"].S,
                        repo = metadataMap["repo"].S,
                        review = prItem["review"].S
                    });
                }
                else
                {
                    return NotFound();
                }
            }
            catch(Exception ex)
            {
                _logger.LogError(ex, $"Caught exception in GetDetails().");
            }
            return NotFound();
            //var detail = new
            //{
            //    id = id,
            //    title = $"Pull Request #{id} Title Example",
            //    status = (id % 2 == 0) ? "Open" : "Closed",
            //    author = "John Doe",
            //    date = "2024-04-28"
            //};

            //return Ok(detail);
        }

        // 2. Get PR Review text
        [HttpGet("review")]
        public IActionResult GetReview([FromQuery] int prNumber)
        {
            _logger.LogInformation("Received request to get Review.");
            // TODO: Replace with real PR review generation
            string mockReview = $"This is an autogenerated review for PR #{prNumber}. It looks good overall but could use minor improvements.";

            return Ok(mockReview);
        }

        // 3. POST feedback for thumbs up/down
        [HttpPost("feedback")]
        public IActionResult PostFeedback([FromBody] FeedbackRequest request)
        {
            // You could log/store this feedback if needed
            Console.WriteLine($"Received feedback: PR#{request.PrNumber}, Vote: {request.Vote}");

            return Ok(new { message = "Feedback received" });
        }

        // 4. POST action decision (Approve or Request Changes)
        [HttpPost("decision")]
        public IActionResult PostDecision([FromBody] DecisionRequest request)
        {
            // You could process/store this action if needed
            Console.WriteLine($"Received decision: PR#{request.PrNumber}, Decision: {request.Decision}");

            return Ok(new { message = "Decision received" });
        }
    }

    // Request DTOs
    public class FeedbackRequest
    {
        public int PrNumber { get; set; }
        public string Vote { get; set; } // \"up\" or \"down\"
    }

    public class DecisionRequest
    {
        public int PrNumber { get; set; }
        public string Decision { get; set; } // \"Approve\" or \"Request Changes\"
    }
}


